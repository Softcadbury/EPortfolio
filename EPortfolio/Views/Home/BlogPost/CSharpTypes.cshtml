<h2>C# 3 - Value and reference types</h2>

<h3>Memmory</h3>
<p>
The memory (RAM) of a computer is didivided in two differents parts, the Stack (Pile in french) and the Heap (Tas in french).
In the .NET Framework, types are distributed between two categories, each distributed in one of these parts of the memory.
</p>

<h3>Value types</h3>
<p>
Value types are allocated on the Stack.
Ex : structures, ennumerations and simply types (bool, int, float, ...).

A value type can be destroyed and created quickly. Its lifetime is determined by the defining scope. The equal operator copy the type in a new one.
</p>

<h3>Reference types</h3>
<p>
Reference types are allocated on the Heap.
Ex : object and strings.

The heap is for dynamic allocation, monitored by the .Net garbage collector. The equal operator results in a copy of the reference.

The string type is special. It's an object but it is immutable. It's mean its value cannot be changed.
</p>

<h3>Boxing and unboxing</h3>
<p>
When the data moves from value types to reference types, it is termed ‘Boxing’ and the reverse is termed ‘UnBoxing’.
This movement of data creates a performance hit.
</p>